package db

import (
	"FilmCollection/structs"
	"fmt"
	"net/http"
	"time"
)

func initTables() error {
	_, err := Conn.Exec(`CREATE TABLE IF NOT EXISTS Films (
		id    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
		name varchar(30) NOT NULL,
		description  varchar(1000),
		rating integer CHECK (rating >= 0 AND rating <= 10),
		release_date DATE
	);`)
	if err != nil {
		return err
	}
	_, err = Conn.Exec(`CREATE TABLE IF NOT EXISTS Actors(
		id    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
		name  varchar(30) NOT NULL,
		gender  varchar(30),
		birth_date DATE
	);`)
	if err != nil {
		return err
	}
	_, err = Conn.Exec(`CREATE TABLE IF NOT EXISTS MovieCast(
		FilmID integer NOT NULL,
		ActorID integer NOT NULL,
		FOREIGN KEY (FilmID) REFERENCES Films (id),
		FOREIGN KEY (ActorID) REFERENCES Actors (id)
	);`)
	if err != nil {
		return err
	}
	_, err = Conn.Exec(`CREATE TABLE IF NOT EXISTS Users(
		id 	integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
		login  varchar(50) NOT NULL,
		password  varchar(50) NOT NULL,
		admin boolean
	);`)
	if err != nil {
		return err
	}
	return nil
}

func CheckForAutorization(r *http.Request, admin bool) error {
	user, pass, ok := r.BasicAuth()
	if !ok {
		return fmt.Errorf("Not authorized")
	}

	var id int
	sqlQuery := "SELECT id FROM Users WHERE login = $1 AND password = $2"
	if admin {
		sqlQuery += " AND admin = true"
	}

	err := Conn.QueryRow(sqlQuery, user, pass).Scan(&id)
	if err != nil {
		return err
	}

	return nil
}

func GetActorByID(id int) (structs.Actor, error) {
	q := Conn.QueryRow("SELECT * FROM actors WHERE id = $1", id)
	var actor structs.Actor
	var birthDate time.Time
	err := q.Scan(&actor.Id, &actor.Name, &actor.Gender, &birthDate)
	actor.BirthDate = structs.Date{birthDate}
	if err != nil {
		return structs.Actor{}, err
	}
	rows, err := Conn.Query("SELECT filmid FROM moviecast WHERE actorid = $1", id)
	if err != nil {
		return structs.Actor{}, err
	}
	for rows.Next() {
		var filmID int
		err = rows.Scan(&filmID)
		if err != nil {
			return structs.Actor{}, err
		}
		actor.Films = append(actor.Films, filmID)
	}
	return actor, nil
}

func GetFilmByID(id int) (structs.Film, error) {
	q := Conn.QueryRow("SELECT * FROM films WHERE id = $1", id)
	var film structs.Film
	var releaseDate time.Time
	err := q.Scan(&film.Id, &film.Name, &film.Description, &film.Rating, &releaseDate)
	film.ReleaseDate = structs.Date{releaseDate}
	if err != nil {
		return structs.Film{}, err
	}
	rows, err := Conn.Query("SELECT actorid FROM moviecast WHERE filmid = $1", id)
	if err != nil {
		return structs.Film{}, err
	}
	for rows.Next() {
		var actorID int
		err = rows.Scan(&actorID)
		if err != nil {
			return structs.Film{}, err
		}
		film.Actors = append(film.Actors, actorID)
	}
	if err != nil {
		return structs.Film{}, err
	}
	return film, nil
}
